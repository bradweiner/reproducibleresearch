table(wday(sampleTimes)
)
table(wday(sampleTimes,abbr=TRUE)
)
table(wday(sampleTimes,label=TRUE))
table(wday(sampleTimes,label=TRUE))
table(year(sampleTimes))
table(year(sampleTimes),wday(sampleTimes,label=TRUE))
15+12+15+15
70-57
melt
library(foreign)
test<-read.spps(file.choose())
test<-read.spss(file.choose())
rm(list=ls())
install.packages(ggmaps)
install.packages("ggmaps")
geocode('University of Minnesota')
library(ggmaps)
library(ggmap)
install.packages("ggmap")
library(ggmap)
geocode('University of Minnesota')
umn=geocode('University of Minnesota')
class(umn)
names(umn)
ggmap
sub1
svg
ls()
library(ggplot2)
library(rJava)
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
library(RJDBC)
driver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib/ojdbc6.jar")
drvdir<-"C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib"
connection <- dbConnect(driver, "jdbc:oracle:thin:@dmw1-scan.oit.umn.edu:1521/dwprd.oit", "oueadm", "wUED739A")
query1 <- dbGetQuery(connection, "SELECT * from PS_DWAD_TC_TRACK_HIST where ADMIT_TERM = '1139'")
track<-as.data.frame(query1)
query1 <- dbGetQuery(connection, "SELECT * from PS_DWAD_TC_TRACK_HIST where ADMIT_TERM = '1139'")
query2<-(connection, "SELECT * from PS_DWSA_NSCR where TERM = '1139' and ACAD_CAREER = 'UGRD' and INSTITUTION='UMNTC'")
disconnect<-dbDisconnect(connection)
disconnect
query1 <- dbGetQuery(connection, "SELECT * from PS_DWAD_TC_TRACK_HIST where ADMIT_TERM = '1139'")
driver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib/ojdbc6.jar")
drvdir<-"C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib"
connection <- dbConnect(driver, "jdbc:oracle:thin:@dmw1-scan.oit.umn.edu:1521/dwprd.oit", "oueadm", "wUED739A")
query1 <- dbGetQuery(connection, "SELECT * from PS_DWAD_TC_TRACK_HIST where ADMIT_TERM = '1139'")
track<-as.data.frame(query1)
disconnect<-dbDisconnect(connection)
disconnect
library(RJDBC)
driver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib/ojdbc6.jar")
drvdir<-"C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib"
connection <- dbConnect(driver, "jdbc:oracle:thin:@dmw1-scan.oit.umn.edu:1521/dwprd.oit", "oueadm", "wUED739A")
query1 <- dbGetQuery(connection, "select  distinct a.*, b.HS_GPA
from ps_dwsa_st_car_trm a
right outer join PS_DWAD_TC_TRACK_HIST b
on a.emplid = b.emplid
and a.institution = b.institution
and a.term = b.admit_term
and a.acad_plan_sdesc = b.acad_plan_sdesc
and a.acad_career = b.acad_career
where a.term = '1139'
AND a.INSTITUTION = 'UMNTC'
and b.RUN_EFFDT_WI_ISO = '25'
and b.HS_GPA is not null")
track<-as.data.frame(query1)
query1 <- dbGetQuery(connection, "select  distinct a.*, b.HS_GPA from ps_dwsa_st_car_trm a right outer join PS_DWAD_TC_TRACK_HIST b
on a.emplid = b.emplid
and a.institution = b.institution
and a.term = b.admit_term
and a.acad_plan_sdesc = b.acad_plan_sdesc
and a.acad_career = b.acad_career
where a.term = '1139'
AND a.INSTITUTION = 'UMNTC'
and b.RUN_EFFDT_WI_ISO = '25'
and b.HS_GPA is not null")
query<-"select  distinct a.*, b.HS_GPA
from ps_dwsa_st_car_trm a
right outer join PS_DWAD_TC_TRACK_HIST b
on a.emplid = b.emplid
and a.institution = b.institution
and a.term = b.admit_term
and a.acad_plan_sdesc = b.acad_plan_sdesc
and a.acad_career = b.acad_career
where a.term = '1139'
AND a.INSTITUTION = 'UMNTC'
and b.RUN_EFFDT_WI_ISO = '25'
and b.HS_GPA is not null"
query
disconnect<-dbDisconnect(connection)
disconnect
connection <- dbConnect(driver, "jdbc:oracle:thin:@dmw1-scan.oit.umn.edu:1521/dwprd.oit", "oueadm", "wUED739A")
library(rJava)
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
library(RJDBC)
driver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib/ojdbc6.jar")
drvdir<-"C:/app/oracle/product/11.2.0/client_1_64bit/jdbc/lib"
connection <- dbConnect(driver, "jdbc:oracle:thin:@dmw1-scan.oit.umn.edu:1521/dwprd.oit", "oueadm", "wUED739A")
read.csv(file.choose())
gpa<-read.csv(file.choose())
names(gpa)
plot(hist(gpa$HS_GOA))
plot(hist(gpa$HS_GPA))
plot(hist(gpa$HS_GPA),breaks=20)
hist(gpa$HS_GPA,breaks=20)
plot(hist(gpa$HS_GPA,breaks=20))
names(gpa)
plot(CUR_GPA~HS_GPA,data=gpa)
plot(CUR_GPA~HS_GPA,data=gpa, pch=ACAD_PROG_SDESC)
plot(CUR_GPA~HS_GPA,data=gpa)
plot(CUR_GPA~HS_GPA,data=gpa,col=gpa$ACAD_PROG_SDESC)
legend(gpa$ACAD_PROG_SDESC)
plot(CUR_GPA~HS_GPA,data=gpa, pch=ACAD_PROG_SDESC)
plot(CUR_GPA~HS_GPA,data=gpa,col=gpa$ACAD_PROG_SDESC)
rm(list=ls())
install.packages("Rcircos")
install.packages("RCircos")
library(RCircos)
data(RCircos.Histogram.Data)
data(RCircos.Histogram.Data)
data(RCircos.Histogram.Data)
a<-data(RCircos.Histogram.Data)
a
head(a)
a[1]
data
data(RCircos.Histogram.Data)
head(RCircos.Histogram.Data)
a<-as.data.frame(data(RCircos.Histogram.Data))
a
rm(a)
data(RCircos.Histogram.Data)
RCircos.Histogram.Data
a<-RCircos.Histogram.Data
a
names(a)
demo("RCircos.Demo.Human")
ls()
a=letters
a
a=letters+2
rm(a)
rnorm(1,mean=.2)
ls()
setwd("C:/Users/wein0339/Desktop")
setwd("C:/Users/wein0339/Desktop/Lahman")
list.files()
hof=read.csv("HallOfFame.csv")
head(hof)
master=read.csv("Master.csv")
head(master)
master$nameLast==Oliva
master$nameLast=="Oliva"
master[master$nameLast=="Oliva"]
master$nameLast[master$nameLast=="Oliva"]
names(master)
subset(master,subset=nameLast=="Oliva")
head(hof)
rm(list=ls())
#setwd
setwd("C:/Users/wein0339/Desktop/Dropbox/Coursera/Reproducible Research/Assignment 1")
#load data
act<-read.csv("activity.csv")
act$date<-as.Date(act$date,format="%Y-%m-%d")
unique.dates<-as.data.frame(unique(act$date))
colnames(unique.dates)<-c("date")
b<-aggregate(steps~date,data=act,FUN=c("sum","mean"))
c<-aggregate(steps~date,data=act,FUN=mean)
almost.final<-merge(b,unique.dates,by="date",all.y=TRUE)
almost.final$steps[is.na(almost.final$steps)]<-0
#plot histogram
hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken Each Day")
rm(list=ls())
act<-read.csv("activity.csv")
act$date<-as.Date(act$date,format="%Y-%m-%d")
unique.dates<-as.data.frame(unique(act$date))
colnames(unique.dates)<-c("date")
b<-aggregate(steps~date,data=act,FUN=sum
)
almost.final<-merge(b,unique.dates,by="date",all.y=TRUE)
almost.final$steps[is.na(almost.final$steps)]<-0
#plot histogram
hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken
)
)
plot(hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken Each Day"))
almost.final
hist(almost.final$steps)
plot(hist(almost.final$steps)
)
dev.cur()
dev.list()
dev.off()
plot(hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken Each Day"))
plot(hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken Each Day", xlab="Number of Steps per Day", ylab="Frequency in Data Set"))
dev.off()
plot(hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken Each Day", xlab="Number of Steps per Day", ylab="Frequency in Data Set"))
plot(hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken Each Day")
)
dev.off()
plot(hist(almost.final$steps,breaks=15,main="Frequency of Total Number of Steps Taken Each Day"))
plot(hist(almost.final$steps,breaks=15)
)
dev.off()
#plot histogram
plot(hist(almost.final$steps,breaks=15)
)
plot(hist(almost.final$steps,breaks=15))
dev.off()
plot(hist(almost.final$steps,breaks=15))
dev.off()
plot(hist(almost.final$steps,xlab="Steps per Day",ylab="Frequency", main="Total Number of Steps per Day",breaks=15))
rversion
library(ggplot2)
qplot(stes, data=almost.final, geom="histogram")
qplot(steps, data=almost.final, geom="histogram")
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day",binwidth=15)
library(ggplot2)
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day",binwidth=30)
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day",binwidth=2000)
dev.off()
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
ls()
almost.final
summary(almost.final)
head(act)
plot(steps~interval,type="l",data=act)
c<-aggregate(steps~interval,data=act,FUN=mean)
c
length(unique(act$interval))
c
names(c)
plot(steps~interval,type="l",data=c)
plot(steps~interval,type="l",data=c,main="Average Steps by Five Minute Interval")
plot(steps~interval,type="l",data=c,main="Average Steps by Five Minute Interval",xlab="Interval")
plot(steps~interval,type="l",data=c,main="Average Steps by Five Minute Interval",xlab="Interval",ylab="Average Steps")
max(c$interval)
plot(steps~interval,type="l",data=c,main="Average Steps by Five Minute Interval",xlab="Interval",ylab="Average Steps",breaks=100)
summary(steps)
summary(c)
which.max(c)
which.max(c$interval)
which.max(c$steps)
c[104]
c[, 104]
c[,104]
c[104, ]
c[(which.max(c$steps))]
c[which.max(c$steps)]
c[which.max(c$steps), ]
is.na(act)
table(is.na(act))
nrow(act)
complete.cases(act)
table(complete.cases(act))
nrow(act)
plot(table(complete.cases(act)))
(table(complete.cases(act)))
dev.off()
(table(complete.cases(act)))
sum(complete.cases(act))
sum(complete.cases(act))/nrow(act)
table(is.na(act$date))
table(is.na(act$steps))
table(is.na(act$interval))
b
c
class(c)
act.dedupe<-act
act.dedupe<-merge(x=act,y=c,by=interval,all.x=TRUE)
c
names(c)
names(act)
act.dedupe<-merge(x=act,y=c,by=interval,all.x=TRUE)
act.dedupe<-merge(x=act,y=c,by.x=interval,all.x=TRUE)
act.dedupe<-merge(x=act,y=c,all.x=TRUE)
act.dedupe
names(actdedupe)
names(act.dedupe)
rm(act.dedupe)
colnames(c)<-c("interval","mean.steps")
names(c)
act.impute<-merge(x=act,y=c,by="interval",all.x=TRUE)
names(act.impute)
head(act.impute)
act(impute)
act.impute[1:350, ]
View(act.impute)
act.impute[act$interval==835]
act.impute[$interval==835]
act.impute[interval==835]
act.impute[act.impute$interval==835]
tail(act.impute)
tail(act.impute,n=100)
ifelse((is.na(act.impute$steps=TRUE),yes=act.impute$steps.impute=act.impute$mean.steps,no=act.impute$impute.steps=act.impute$steps)
ifelse((is.na(act.impute$steps==TRUE),yes=act.impute$steps.impute=act.impute$mean.steps,no=act.impute$impute.steps=act.impute$steps)
ifelse(is.na(act.impute$steps=TRUE),yes=act.impute$steps.impute=act.impute$mean.steps,no=act.impute$impute.steps=act.impute$steps)
is.na(act.impute$steps)
is.na(act.impute$steps)=TRUE
is.na(act.impute$steps)==TRUE
act.impute<-merge(x=act,y=c,by="interval",all.x=TRUE)
is.na(act.impute$steps)==TRUE
a<-is.na(act.impute$steps)==TRUE
a
sum(a)
ifelse(is.na(act.impute$steps)==TRUE,yes=act.impute$steps.impute=act.impute$mean.steps,no=act.impute$impute.steps=act.impute$steps)
ifelse(is.na(act.impute$steps)==TRUE,act.impute$steps<-act.impute$mean.steps,act.impute$steps=act.impute$steps)
ifelse(is.na(act.impute$steps)==TRUE,act.impute$steps<-act.impute$mean.steps,act.impute$steps<-act.impute$steps)
act.impute$impute.steps<-ifelse(is.na(act.impute$steps)==TRUE,act.impute$steps<-act.impute$mean.steps,act.impute$steps<-act.impute$steps)
head(act.impute)
table(is.na(act$steps))
table(is.na(act.impute$steps))
act.impute<-merge(x=act,y=c,by="interval",all.x=TRUE)
table(is.na(act.impute$steps))
table(is.na(act$steps))
act.impute$impute.steps<-ifelse(is.na(act.impute$steps)==TRUE,act.impute$mean.steps,act.impute$steps)
table(is.na(act.impute$steps))
table(is.na(act.impute$impute.steps))
View(act.impute)
tail(act.impute)
tail(act)
tail(c)
tail(act.impute)
tail(act.impute,n=100)
tail(act,n=100)
act.impute<-merge(x=act,y=c,by="interval",all.x=TRUE)
head(act.impute)
act.impute$impute.steps<-ifelse(is.na(act.impute$steps)==TRUE,act.impute$steps<-act.impute$mean.steps,act.impute$steps<-act.impute$steps)
head(act.impute)
nrow(act.impute)
act.impute<-merge(x=act,y=c,by="interval",all.x=TRUE)
act.impute$impute.steps<-ifelse(is.na(act.impute$steps)==TRUE,act.impute$mean.steps,act.impute$steps)
table(is.na(act.impute$steps))
table(is.na(act.impute$impute.steps))
head(act.impute)
head(act)
names(act)
names(act.impute)
act.new<-act.impute[1]
act.new
head(act.new)
names(act)
names(act.impute)
act.new<-act.impute[c(5,3,1),c]
act.new<-act.impute[c(5,3,1), ]
names(act.new)
act.new
act.new<-act.impute[,1]
act.new
names(act.new)
head(act.new)
names(act.impute)
names(act)
act.new<-cbind(act.impute$.impute.steps,act.impute$date,act.impute$interval)
head(act.new)
act.new<-act.impute[,c("impute.steps","date","interval")]
names(act.new)
nrow(act.new)
names(act.new)
names(act)
d<-aggregate(impute.steps~date,data=act.new,FUN=sum)
b
d
b
almost.final<-merge(b,unique.dates,by="date",all.y=TRUE)
library(ggplot2)
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
dev.off()
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
summary(almost.final)
almost.final$steps[is.na(almost.final$steps)]<-0
summary(almost.final)
b<-aggregate(steps~date,data=act,FUN=sum)
almost.final<-merge(b,unique.dates,by="date",all.y=TRUE)
b
b<-aggregate(steps~date,data=act,FUN=sum)
almost.final<-merge(b,unique.dates,by="date",all.y=TRUE)
almost.final
b<-aggregate(steps~date,data=act,FUN=sum,na.rm=FALSE)
b
almost.final<-merge(b,unique.dates,by="date",all.y=TRUE)
summary(almost.final)
d<-aggregate(impute.steps~date,data=act.new,FUN=sum)
almost.final.1<-merge(d,unique.dates,by="date",all.y=TRUE)
almost.final.1
qplot(steps.impute, data=almost.final.1, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
names(almost.final.1)
qplot(impute.steps, data=almost.final.1, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
summary(almost.final)
summary(almost.final.1)
weekdays
weekdays(almost.final.1$date)
c
names(c)
weekdays
weekdays(almost.final.1$date)
weekdays(almost.final.1$date,abbreviate=TRUE)
levels
act$day<-weekday(act$date)
act$day<-weekdays(act$date)
head(act)
impute.steps$day<-weekdays(act$date)
act.new$day<-weekdays(act$date)
names(act.new)
act.new$day.weekend<-ifelse(act.new$day=="Saturday" | act.new$day=="Sunday","Weekend","Weekday")
names(act.new)
str(act.new)
table(act.new$day,act.new$day.weekend)
names(act.new)
d<-aggregate(impute.steps~interval+day.weekend,data=act.new,FUN=mean)
e<-aggregate(impute.steps~interval+day.weekend,data=act.new,FUN=mean)
d<-aggregate(impute.steps~date,data=act.new,FUN=sum)
head(e)
library(lattice)
xyplot(x=interval,y=impute.steps,data=e,panel=day.weekend)
e
names(x)
names(e)
xyplot(interval~impute.steps,data=e,panel=day.weekend)
xyplot(interval~impute.steps,data=e)
xyplot(interval~impute.steps,data=e,panel=day.weekend)
xyplot(interval~impute.steps|day.weekend,data=e)
xyplot(interval~impute.steps|day.weekend,data=e,type="l")
xyplot(impute.steps~interval|day.weekend,data=e,type="l")
xyplot(impute.steps~interval|day.weekend,data=e,type="l",horizontal=TRUE)
xyplot(impute.steps~interval|day.weekend,data=e,type="l",horizontal=FALSE)
xyplot(impute.steps~interval|day.weekend,data=e,type="l",layout=c(n,0))
xyplot(impute.steps~interval|day.weekend,data=e,type="l",layout=(n,0))
xyplot(impute.steps~interval|day.weekend,data=e,type="l")
npar
par
par(mfrow=c(2,1))
xyplot(impute.steps~interval|day.weekend,data=e,type="l")
par(mfrow=c(1,2))
xyplot(impute.steps~interval|day.weekend,data=e,type="l")
xyplot(impute.steps~interval|day.weekend,layout=c(2,1)data=e,type="l")
xyplot(impute.steps~interval|day.weekend,layout=c(2,1),data=e,type="l")
xyplot(impute.steps~interval|day.weekend,layout=c(1,2),data=e,type="l")
xlab="Interval",ylab="Number of Steps")
xyplot(impute.steps~interval|day.weekend,layout=c(1,2),data=e,type="l",
xlab="Interval",ylab="Number of Steps")
source('C:/Users/wein0339/Desktop/Dropbox/Coursera/Reproducible Research/Assignment 1/Assignment1.R')
#produce line plot
library(lattice)
xyplot(impute.steps~interval|day.weekend,layout=c(1,2),data=e,type="l",
xlab="Interval",ylab="Number of Steps")
rm(list=ls())
#setwd
setwd("C:/Users/wein0339/Desktop/Dropbox/Coursera/Reproducible Research/Assignment 1")
#Load the data
act<-read.csv("activity.csv")
#Process/Transform the data
act$date<-as.Date(act$date,format="%Y-%m-%d")
unique.dates<-as.data.frame(unique(act$date))
colnames(unique.dates)<-c("date")
b<-aggregate(steps~date,data=act,FUN=sum)
almost.final<-merge(b,unique.dates,by="date",all.y=TRUE)
#Make a histogram of the total number of steps taken each day
library(ggplot2)
qplot(steps, data=almost.final, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
dev.off()
#Calculate and report the mean and median total number of steps taken per day
summary(almost.final)
#Mean= 10,766
#Median= 10,765
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
c<-aggregate(steps~interval,data=act,FUN=mean)
plot(steps~interval,type="l",data=c,main="Average Steps by Five Minute Interval",xlab="Interval",ylab="Average Steps")
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
c[which.max(c$steps), ]
#Interval 835 with 206.16 steps on average per day
#Calculate and report the total number of missing values in the dataset
#(i.e. the total number of rows with NAs)
(table(complete.cases(act)))
sum(complete.cases(act))/nrow(act)
#15,264 Rows are complete out of a total of 17,568 (86.8%)
#Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#change column names for mean.steps
colnames(c)<-c("interval","mean.steps")
#merge complete file with mean.steps for each interval
act.impute<-merge(x=act,y=c,by="interval",all.x=TRUE)
#impute missing values for steps with the mean value for that interval
act.impute$impute.steps<-ifelse(is.na(act.impute$steps)==TRUE,act.impute$mean.steps,act.impute$steps)
#Create a new dataset that is equal to the original dataset but with the missing data filled in.
act.new<-act.impute[,c("impute.steps","date","interval")]
#Make a histogram of the total number of steps taken each day and Calculate and #report the mean and median total number of steps taken per day. Do these values #differ from the estimates from the first part of the assignment? What is the impact #of imputing missing data on the estimates of the total daily number of steps?
#aggregate imputed steps by date
d<-aggregate(impute.steps~date,data=act.new,FUN=sum)
almost.final.1<-merge(d,unique.dates,by="date",all.y=TRUE)
#plot histogram of impute steps by day
qplot(impute.steps, data=almost.final.1, geom="histogram",main="Distribution of Steps per Day",xlab="Steps per Day")
#calculate summaries for non-imputed vs. imputed data
summary(almost.final)
summary(almost.final.1)
#Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
#The differences are fairly small, especially in the measures of central
#tendency. It appears as though the distribution moved around the
#averages slightly with 1st quartile increasing and the 3rd decreasing
#Build a variable separating the week from the weekend
act.new$day<-weekdays(act$date)
act.new$day.weekend<-ifelse(act.new$day=="Saturday" | act.new$day=="Sunday","Weekend","Weekday")
#aggregate average number of steps by the interval and the weekend
e<-aggregate(impute.steps~interval+day.weekend,data=act.new,FUN=mean)
#produce line plot
library(lattice)
xyplot(impute.steps~interval|day.weekend,layout=c(1,2),data=e,type="l",
xlab="Interval",ylab="Average Number of Steps")
